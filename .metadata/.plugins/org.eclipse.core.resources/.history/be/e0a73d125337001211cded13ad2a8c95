/*
 * UsbController.java
 * This file is part of UsbController
 *
 * Copyright (C) 2012 - Manuel Di Cerbo
 *
 * UsbController is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * UsbController is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with UsbController. If not, see <http://www.gnu.org/licenses/>.
 */
package org.no9.r2993;

import java.io.IOException;
import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.Iterator;

import com.hoho.android.usbserial.driver.UsbSerialDriver;
import com.hoho.android.usbserial.driver.UsbSerialProber;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbConstants;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbEndpoint;
import android.hardware.usb.UsbInterface;
import android.hardware.usb.UsbManager;

/**
 * (c) Neuxs-Computing GmbH Switzerland
 * @author Manuel Di Cerbo, 02.02.2012
 *
 */
public class UsbController {

	private final Context mApplicationContext;
	private final UsbManager mUsbManager;
	private final IUsbConnectionHandler mConnectionHandler;
	private final UsbSerialDriver driver;
	private final int VID;
	private final int PID;
	protected static final String ACTION_USB_PERMISSION = "org.no9.r2993.USB";

	/**
	 * Activity is needed for onResult
	 * 
	 * @param parentActivity
	 */
	public UsbController(Context ctx,
			IUsbConnectionHandler connectionHandler, int vid, int pid) {
		mApplicationContext = ctx;
		mConnectionHandler = connectionHandler;
		mUsbManager = (UsbManager) mApplicationContext
				.getSystemService(Context.USB_SERVICE);
		VID = vid;
		PID = pid;
		driver = UsbSerialProber.acquire(mUsbManager);
		
	}
	
	public void stop() {

	}

	private UsbRunnable mLoop;
	private Thread mUsbThread;

	private void startHandler(UsbDevice d) {
		if (mLoop != null) {
			mConnectionHandler.onErrorLooperRunningAlready();
			return;
		}
		 
		mLoop = new UsbRunnable(d);
		mUsbThread = new Thread(mLoop);
		mUsbThread.start();
	}

	public void send(byte[] data) {
		mData = data;
		L.info(">>> USB_DATA_SENT >>>");
		L.info(data.toString());
		synchronized (sSendLock) {
			sSendLock.notify();
		}
	}

	

	

	// MAIN LOOP
	private static final Object[] sSendLock = new Object[]{};//learned this trick from some google example :)
	//basically an empty array is lighter than an  actual new Object()...
	private boolean mStop = false;
	private byte[] mData = new byte[] { 0x00 };

	private class UsbRunnable implements Runnable {
		private final UsbDevice mDevice;
	
		UsbRunnable(UsbDevice dev) {
			mDevice = dev;
		}
	
		@Override
		public void run() {
			for (;;) {// this is the main loop for transferring
				
				synchronized (sSendLock) {
					try {
						sSendLock.wait();
					} catch (InterruptedException e) {
						if (mStop) {
							mConnectionHandler.onUsbStopped();
							return;
						}
						e.printStackTrace();
					}
				}

				if (driver != null) {
					  driver.open();
					  try {
					    driver.setBaudRate(115200);
					    
					    int[] arr = new int[] { 0xF9 };
						driver.write(ENCODE_INT_ARRAY(arr), 1000);
						
					    byte buffer[] = new byte[16];
					    int numBytesRead = driver.read(buffer, 1000);
					    L.info("Read " + numBytesRead + " bytes.");
					  } catch (IOException e) {
					    // Deal with error.
					  } finally {
					    driver.close();
					  }
				}
				
				if (mStop) {
					mConnectionHandler.onUsbStopped();
					return;
				}
				
				try {
					Thread.sleep(5);
				} catch (InterruptedException e) {
					L.error(e);
				}
			}
		}
			
		
	
	// END MAIN LOOP
	private BroadcastReceiver mPermissionReceiver = new PermissionReceiver(
			new IPermissionListener() {
				@Override
				public void onPermissionDenied(UsbDevice d) {
					L.error("Permission denied on " + d.getDeviceId());
				}
			});

	private static interface IPermissionListener {
		void onPermissionDenied(UsbDevice d);
	}

	public static byte[] ENCODE_INT_ARRAY(int[] data) {
        byte[] encoded_data = new byte[data.length * 2];
        ENCODE_STRING(data, ByteBuffer.wrap(encoded_data), 0);
        return encoded_data;
    }
	
	public static void ENCODE_STRING(int[] original_data, ByteBuffer buffer, int offset) {
        for (int i=0; i<original_data.length; i++) {
            buffer.put(offset++, (byte)LSB(original_data[i]));
            buffer.put(offset++, (byte)MSB(original_data[i]));
        }
    }
	
	/**
     * Return less significant byte
     *
     * @param value value
     * @return less significant byte
     */
    public static int LSB(int value) {
        return value & 0x7F;
    }

    /**
     * Return most significant byte
     *
     * @param value value
     * @return most significant byte
     */
    public static int MSB(int value) {
        return (value >> 7) & 0x7F;
    }
	public final static String TAG = "USBController";
}


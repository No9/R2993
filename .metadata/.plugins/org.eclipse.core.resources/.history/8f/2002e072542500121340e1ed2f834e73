package org.no9.r2993;

import java.io.BufferedReader;
import java.io.ByteArrayOutputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.ServerSocket;
import java.net.Socket;

import android.R.integer;
import android.app.Activity;
import android.util.Log;


public class SocketController implements Runnable{

	
	public static final String SERVERIP = "127.0.0.1";
	public static final int SERVERPORT = 4444;
	private final ISocketConnectionHandler mSocketConnectionHandler;
	private final UsbController sUsbController = null;
	//private final Context mApplicationContext;
	private final Thread mThread;
	public SocketController(Activity parentActivity, ISocketConnectionHandler handler, int vid, int pid){
		
		mSocketConnectionHandler = handler;
		if(sUsbController == null)
			sUsbController = new UsbController(parentActivity, mConnectionHandler, vid, pid);
		else{
			sUsbController.stop();
			sUsbController = new UsbController(parentActivity, mConnectionHandler, vid, pid);
		}
		//mApplicationContext = parentActivity.getApplicationContext();
		mThread = new Thread(this);
		mThread.start();
	}
	/*
	private void init() {
		enumerate(new IPermissionListener() {
			@Override
			public void onPermissionDenied(UsbDevice d) {
				UsbManager usbman = (UsbManager) mApplicationContext
						.getSystemService(Context.USB_SERVICE);
				PendingIntent pi = PendingIntent.getBroadcast(
						mApplicationContext, 0, new Intent(
								ACTION_USB_PERMISSION), 0);
				mApplicationContext.registerReceiver(mPermissionReceiver,
						new IntentFilter(ACTION_USB_PERMISSION));
				usbman.requestPermission(d, pi);
			}
		});
	}
	*/
	OutputStream out = null;
	
	public void run() {
		 
        try {
        	
        	
            ServerSocket serverSocket = new ServerSocket(SERVERPORT);
            mConnectionHandler.onConnected();
        	
            while (true) {              

                Socket client = serverSocket.accept();
                OutputStream out = client.getOutputStream();
                
                try {
                     BufferedReader in = new BufferedReader(new InputStreamReader(client.getInputStream()));
                     	
                     String str = in.readLine();
                     int msg = Integer.parseInt(str);
                     sUsbController.send((byte)(msg&0xFF));
                     
                     l("Socket Data: " + str);
                     //Return with version message;
                     
                     
                } catch(Exception e) {

                	l("Error in buffer reader: " + e.getMessage() + "\n");
                	e(e);
                	mConnectionHandler.onError("Error in buffer reader: " + e.getMessage() + "\n");
                    
                } finally {

                       client.close();
                       //mConnectionHandler.onClientClosed();
                       l("S: Done.");
                   }
            }      

        } catch (Exception e) {
        	mConnectionHandler.onError("Error in connection : " + e.getMessage() + "\n");
            l("S: Error");
            e(e);
        }
   }
	
	public final static String TAG = "SocketController";
    
    private void l(Object msg) {
		Log.d(TAG, ">==< " + msg.toString() + " >==<");
	}
    
    private void e(Object msg) {
		Log.e(TAG, ">==< " + msg.toString() + " >==<");
	}
	
private final IUsbConnectionHandler mConnectionHandler = new IUsbConnectionHandler() {
		
		@Override
		public void onUsbStopped() {
			String msg = "Usb stopped!\n"; 
			L.e(msg);
		}
		
		@Override
		public void onErrorLooperRunningAlready() {
			String msg = "Looper already running!\n";
			L.e(msg);
		}
		
		@Override
		public void onUsbStarted() {
			String msg = "Usb Started!\n";
			L.e(msg);
		}
		
		@Override
		public void onUsbData(byte data) {
//			String msg = "Usb Data!\n";
//			appendToTextField(msg);
			out.write(data);
			L.e(data);
		}
		
		
		@Override
		public void onDeviceNotFound() {
			String msg = "Device Not Found!\n";
			L.e(msg);
			
			if(sUsbController != null){
				sUsbController.stop();
				sUsbController = null;
				String usbmsg = "UsbController Stopped!\n";
				L.e(msg);
			}
		}
	};
}

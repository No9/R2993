/*
 * UsbController.java
 * This file is part of UsbController
 *
 * Copyright (C) 2012 - Manuel Di Cerbo
 *
 * UsbController is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * UsbController is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with UsbController. If not, see <http://www.gnu.org/licenses/>.
 */
package org.no9.r2993;

import java.nio.ByteBuffer;
import java.util.HashMap;
import java.util.Iterator;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.content.IntentFilter;
import android.hardware.usb.UsbConstants;
import android.hardware.usb.UsbDevice;
import android.hardware.usb.UsbDeviceConnection;
import android.hardware.usb.UsbEndpoint;
import android.hardware.usb.UsbInterface;
import android.hardware.usb.UsbManager;
import android.hardware.usb.UsbRequest;

/**
 * (c) Neuxs-Computing GmbH Switzerland
 * @author Manuel Di Cerbo, 02.02.2012
 *
 */
public class UsbController {

	private final Context mApplicationContext;
	private final UsbManager mUsbManager;
	private final IUsbConnectionHandler mConnectionHandler;
	private final UsbSerialDriver driver;
	private final int VID;
	private final int PID;
	protected static final String ACTION_USB_PERMISSION = "org.no9.r2993.USB";

	/**
	 * Activity is needed for onResult
	 * 
	 * @param parentActivity
	 */
	public UsbController(Context ctx,
			IUsbConnectionHandler connectionHandler, int vid, int pid) {
		mApplicationContext = ctx;
		mConnectionHandler = connectionHandler;
		mUsbManager = (UsbManager) mApplicationContext
				.getSystemService(Context.USB_SERVICE);
		VID = vid;
		PID = pid;
		driver = UsbSerialProber.acquire(mUsbManager);
		init();
	}

	private void init() {
		enumerate(new IPermissionListener() {
			@Override
			public void onPermissionDenied(UsbDevice d) {
				UsbManager usbman = (UsbManager) mApplicationContext
						.getSystemService(Context.USB_SERVICE);
				PendingIntent pi = PendingIntent.getBroadcast(
						mApplicationContext, 0, new Intent(
								ACTION_USB_PERMISSION), 0);
				mApplicationContext.registerReceiver(mPermissionReceiver,
						new IntentFilter(ACTION_USB_PERMISSION));
				usbman.requestPermission(d, pi);
			}
		});
	}

	public void stop() {
		mStop = true;
		synchronized (sSendLock) {
			sSendLock.notify();
		}
		try {
			if(mUsbThread != null)
				mUsbThread.join();
		} catch (InterruptedException e) {
			L.error(e.toString());
		}
		mStop = false;
		mLoop = null;
		mUsbThread = null;
		
		try{
			mApplicationContext.unregisterReceiver(mPermissionReceiver);
		}catch(IllegalArgumentException e){};//bravo
	}

	private UsbRunnable mLoop;
	private Thread mUsbThread;

	private void startHandler(UsbDevice d) {
		if (mLoop != null) {
			mConnectionHandler.onErrorLooperRunningAlready();
			return;
		}
		 
		mLoop = new UsbRunnable(d);
		mUsbThread = new Thread(mLoop);
		mUsbThread.start();
	}

	public void send(byte[] data) {
		mData = data;
		L.info(">>> USB_DATA_SENT >>>");
		L.info(data.toString());
		synchronized (sSendLock) {
			sSendLock.notify();
		}
	}

	private void enumerate(IPermissionListener listener) {
		L.info("enumerating");
		HashMap<String, UsbDevice> devlist = mUsbManager.getDeviceList();
		Iterator<UsbDevice> deviter = devlist.values().iterator();
		while (deviter.hasNext()) {
			UsbDevice d = deviter.next();
			L.info("Found device: "
					+ String.format("%04X:%04X", d.getVendorId(),
							d.getProductId()));
			
			if (d.getVendorId() == VID && d.getProductId() == PID) {
				L.info("Device under: " + d.getDeviceName());
				if (!mUsbManager.hasPermission(d))
					listener.onPermissionDenied(d);
				else{
					startHandler(d);
					return;
				}
				break;
			}
		}
		L.info("no more devices found");
		mConnectionHandler.onDeviceNotFound();
	}

	private class PermissionReceiver extends BroadcastReceiver {
		private final IPermissionListener mPermissionListener;

		public PermissionReceiver(IPermissionListener permissionListener) {
			mPermissionListener = permissionListener;
		}

		@Override
		public void onReceive(Context context, Intent intent) {
			mApplicationContext.unregisterReceiver(this);
			if (intent.getAction().equals(ACTION_USB_PERMISSION)) {
				if (!intent.getBooleanExtra(
						UsbManager.EXTRA_PERMISSION_GRANTED, false)) {
					mPermissionListener.onPermissionDenied((UsbDevice) intent
							.getParcelableExtra(UsbManager.EXTRA_DEVICE));
				} else {
					L.info("Permission granted");
					UsbDevice dev = (UsbDevice) intent
							.getParcelableExtra(UsbManager.EXTRA_DEVICE);
					if (dev != null) {
						if (dev.getVendorId() == VID
								&& dev.getProductId() == PID) {
							startHandler(dev);// has new thread
						}
					} else {
						L.error("device not present!");
					}
				}
			}
		}

	}

	// MAIN LOOP
	private static final Object[] sSendLock = new Object[]{};//learned this trick from some google example :)
	//basically an empty array is lighter than an  actual new Object()...
	private boolean mStop = false;
	private byte[] mData = new byte[] { 0x00 };

	private class UsbRunnable implements Runnable {
		private final UsbDevice mDevice;
	
		UsbRunnable(UsbDevice dev) {
			mDevice = dev;
		}
	
		@Override
		public void run() {//here the main USB functionality is implemented
			UsbDeviceConnection conn = mUsbManager.openDevice(mDevice);
			
			//mConnectionHandler.onUsbStarted();
			if (!conn.claimInterface(mDevice.getInterface(1), true)) {
				return;
			}
			//conn.controlTransfer(0x40, 0x02, 0x0000, 0, null, 0, 0); //flow control none 
			//conn.controlTransfer(0x40, 0x03, 0x4138, 0, null, 0, 0);
			// Arduino Serial usb Conv
			//conn.controlTransfer(0x40, 0x03, 0x4138, 0, null, 0, 0);
			// 57600 
			//conn.controlTransfer(0x40, 0x03, 0x4138, 0, null, 0, 0);
			conn.controlTransfer(0x21, 34, 0, 0, null, 0, 0);
			conn.controlTransfer(0x21, 32, 0, 0, new byte[] { (byte) 0x80,
					0x25, 0x00, 0x00, 0x00, 0x00, 0x08 }, 7, 0);
	
			UsbEndpoint epIN = null;
			UsbEndpoint epOUT = null;
	
			UsbInterface usbIf = mDevice.getInterface(1);
			for (int i = 0; i < usbIf.getEndpointCount(); i++) {
				if (usbIf.getEndpoint(i).getType() == UsbConstants.USB_ENDPOINT_XFER_BULK) {
					if (usbIf.getEndpoint(i).getDirection() == UsbConstants.USB_DIR_IN)
						epIN = usbIf.getEndpoint(i);
					else
						epOUT = usbIf.getEndpoint(i);
				}
			}
			
			byte[] buffer = new byte[20];

			for (;;) {// this is the main loop for transferring
				synchronized (sSendLock) {
					try {
						sSendLock.wait();
					} catch (InterruptedException e) {
						if (mStop) {
							mConnectionHandler.onUsbStopped();
							return;
						}
						e.printStackTrace();
					}
				}

				//conn.bulkTransfer(epOUT, mData, mData.length, 0);
				L.error(mData);
				
				int[] arr = new int[] { 0xF9 };
				
				
				conn.bulkTransfer(epOUT, ENCODE_INT_ARRAY(arr), 1, 500);
				
				/*conn.bulkTransfer(epIN, buffer, 1, 0);				
				int ibuftosend = 0;
				byte[] buffertosend = new byte[20];
				for (int i = 2; i < 20; i++) {
						if (buffer[i] != 0) {
							buffertosend[ibuftosend] = buffer[i];
							ibuftosend++;
						}
					}
					
				mConnectionHandler.onUsbData(buffertosend);
				break;
				*/
				//conn.bulkTransfer(epOUT, mData, mData.length, 0);
				
//				StringBuilder sb = new StringBuilder();
//				while(conn.bulkTransfer(epIN, buffer, 1, 0) > 0){
//				    for(int i = 0; i < buffer.length; i++){
//				        sb.append((char) buffer[i]);
//				    }
//				}
				
				//L.error(buffer);
				
//				
//				ByteBuffer byteBuffer = ByteBuffer.allocate(20);
//				UsbRequest request = new UsbRequest();
//				request.initialize(conn, epIN);
//				request.queue(byteBuffer, 1);
////		        
//				if (conn.requestWait() == request) {
//					byte[] newStatus = new byte[] { byteBuffer.get(0) };
//					mConnectionHandler.onUsbData(newStatus);
//					try {
//						Thread.sleep(100);
//					} catch (InterruptedException e) {
//					}
//				} else {
//					L.error("requestWait failed, exiting");
//					break;
//				}
			
			
			
				int ibuftosend = 0;
				byte[] buffertosend = new byte[20];

				//if (conn.bulkTransfer(epIN, buffer, 20, 0) >= 0) {
				while(conn.bulkTransfer(epIN, buffer, 1, 0) > 0) {
					
				    for (int i = 0; i < 20; i++) {
							buffertosend[ibuftosend] = buffer[0];
							ibuftosend++;
					}
				}
					mConnectionHandler.onUsbData(buffertosend);
					break;
			}		
//					if(send){
//						String ls = new String(buffer);
//						L.info("SENDING:" + ls);
//					}
                
				
				
				//mConnectionHandler.onUsbData(mData);
				
				if (mStop) {
					mConnectionHandler.onUsbStopped();
					return;
				}
				
				try {
					Thread.sleep(5);
				} catch (InterruptedException e) {
					L.error(e);
				}
				
			}
			
		}
	
	// END MAIN LOOP
	private BroadcastReceiver mPermissionReceiver = new PermissionReceiver(
			new IPermissionListener() {
				@Override
				public void onPermissionDenied(UsbDevice d) {
					L.error("Permission denied on " + d.getDeviceId());
				}
			});

	private static interface IPermissionListener {
		void onPermissionDenied(UsbDevice d);
	}

	public static byte[] ENCODE_INT_ARRAY(int[] data) {
        byte[] encoded_data = new byte[data.length * 2];
        ENCODE_STRING(data, ByteBuffer.wrap(encoded_data), 0);
        return encoded_data;
    }
	
	public static void ENCODE_STRING(int[] original_data, ByteBuffer buffer, int offset) {
        for (int i=0; i<original_data.length; i++) {
            buffer.put(offset++, (byte)LSB(original_data[i]));
            buffer.put(offset++, (byte)MSB(original_data[i]));
        }
    }
	
	/**
     * Return less significant byte
     *
     * @param value value
     * @return less significant byte
     */
    public static int LSB(int value) {
        return value & 0x7F;
    }

    /**
     * Return most significant byte
     *
     * @param value value
     * @return most significant byte
     */
    public static int MSB(int value) {
        return (value >> 7) & 0x7F;
    }
	public final static String TAG = "USBController";
}


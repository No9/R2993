package org.no9.r2993;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PrintStream;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketAddress;

import android.app.Service;
import android.content.Intent;
import android.os.Binder;
import android.os.IBinder;
import android.widget.Toast;


public class SocketService extends Service {

	public static final String SERVERIP = "127.0.0.1";
	public static final int SERVERPORT = 4444;
	OutputStream out = null;
	
    @Override
    public IBinder onBind(Intent arg0) {
        // TODO Auto-generated method stub
        return myBinder;
    }

    private final IBinder myBinder = new LocalBinder();

    public class LocalBinder extends Binder {
        public SocketService getService() {
            return SocketService.this;
        }
    }


    @Override
    public void onCreate() {
        super.onCreate();
    }

    public void IsBoundable(){
        Toast.makeText(this,"I bind like butter", Toast.LENGTH_LONG).show();
    }

    @SuppressWarnings("deprecation")
	public void onStart(Intent intent, int startId){
        super.onStart(intent, startId);
        Toast.makeText(this,"Service created ...", Toast.LENGTH_LONG).show();
        Runnable connect = new connectSocket();
        new Thread(connect).start();
    }

    class connectSocket implements Runnable {

        @Override
        public void run() {
        	try {
            	
                ServerSocket serverSocket = new ServerSocket(SERVERPORT);
                mSocketConnectionHandler.onConnected();
            	
                while (true) {
                	
                    Socket client = serverSocket.accept();
                    out = client.getOutputStream();
                    
                    try {
                    	InputStream is = client.getInputStream();
                    	ByteArrayOutputStream buffer = new ByteArrayOutputStream();
                    	int nRead;
                    	byte[] data = new byte[256];
                    	while ((nRead = is.read(data, 0, data.length)) != -1) {
                    		  buffer.write(data, 0, nRead);
                    		}

                    	buffer.flush();
                    	if(buffer.size() > 0){
                    		sUsbController.send(buffer.toByteArray());
                    		//l("Socket Data: " + buffer.toString("UTF-8"));
                    	}

                    } catch(Exception e) {

                    	l("Error in buffer reader: " + e.getMessage() + "\n");
                    	e(e);
                    	mSocketConnectionHandler.onError("Error in buffer reader: " + e.getMessage() + "\n");
                        
                    } finally {

                           client.close();
                           l("S: Done.");
                           }
                }      

            } catch (Exception e) {
            	mSocketConnectionHandler.onError("Error in connection : " + e.getMessage() + "\n");
                l("S: Error");
                e(e);
            }

        }

    }

    @Override
    public void onDestroy() {
        super.onDestroy();
        try {
            s.close();
        } catch (IOException e) {
            // TODO Auto-generated catch block
            e.printStackTrace();
        }
        s = null;
    }
private final ISocketConnectionHandler mSocketConnectionHandler = new ISocketConnectionHandler() {
    	
    	@Override
    	public void onConnected(){
    		//appendToTextField("TCP Server Running\n");
    	}
    	
    	@Override
    	public void onError(String msg){
    		//appendToTextField("Error in TCPIP server\n");
    		//appendToTextField(msg + "\n");
    	}
    	
    	@Override
    	public void onData(String data){
    		//appendToTextField("Data Arrived:" + data + "\n");
    	}
    	
    	@Override
    	public void onClientClosed(){
    		//appendToTextField("Client Closed\n");
    	}
    };
}

